import { type NextRequest, NextResponse } from "next/server";
import { ImageRequest, ImageResponse } from "@/types";

export async function POST(request: NextRequest) {
  try {
    const body: ImageRequest = await request.json();

    if (!body.prompt) {
      return NextResponse.json(
        { error: "Image prompt is required" },
        { status: 400 },
      );
    }

    console.log("Generating image with Gemini for prompt:", body.prompt);

    // Enhanced prompt for children's book style with character consistency
    let enhancedPrompt = `Create a children's book illustration: ${body.prompt}. Style: colorful, friendly, safe for kids, cartoon-like, whimsical, high quality digital art`;

    // Add character sheet for consistency if provided
    if (body.characterSheet) {
      enhancedPrompt = `${body.characterSheet}. ${enhancedPrompt}`;
    }

    // Add style specification if provided
    if (body.style) {
      enhancedPrompt += `. Art style: ${body.style}`;
    }

    // Check if Google API key is available
    const apiKey = process.env.GOOGLE_GENERATIVE_AI_API_KEY;
    if (!apiKey) {
      console.log("Google API key not found, using enhanced placeholder");
      const fallbackImageUrl = `/placeholder.svg?height=400&width=600&query=${encodeURIComponent(enhancedPrompt)}`;
      return NextResponse.json({
        imageUrl: fallbackImageUrl,
        prompt: body.prompt,
        fallback: true,
        message:
          "Add GOOGLE_GENERATIVE_AI_API_KEY to Project Settings for AI-generated images",
      });
    }

    // Use Gemini for image generation
    const { GoogleGenAI, Modality } = await import("@google/genai");
    const ai = new GoogleGenAI({ apiKey });

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-preview-image-generation",
      contents: enhancedPrompt,
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });

    // Extract image data from response
    let imageUrl = null;
    if (
      response.candidates &&
      response.candidates[0] &&
      response.candidates[0].content &&
      Array.isArray(response.candidates[0].content.parts)
    ) {
      for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
          // Convert base64 to data URL
          const imageData = part.inlineData.data;
          const mimeType = part.inlineData.mimeType || "image/png";
          imageUrl = `data:${mimeType};base64,${imageData}`;
          break;
        }
      }
    }

    if (!imageUrl) {
      throw new Error("No image generated by Gemini");
    }

    console.log("Gemini image generated successfully");

    return NextResponse.json({
      imageUrl,
      prompt: body.prompt,
      generated: true,
    });
  } catch (error) {
    console.error("Gemini image generation error:", error);

    const body: ImageRequest = await request.json(); // Declare body variable here
    const enhancedPrompt = `${body.prompt}, children's book illustration, colorful, friendly, cartoon style`;
    const imageUrl = `/placeholder.svg?height=400&width=600&query=${encodeURIComponent(enhancedPrompt)}`;

    console.log("Using placeholder image as fallback");

    return NextResponse.json({
      imageUrl,
      prompt: body.prompt,
      fallback: true,
      error: error instanceof Error ? error.message : "Image generation failed",
    });
  }
}
